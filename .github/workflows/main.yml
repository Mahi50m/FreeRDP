name: Secure RDP via Tailscale

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Configure Core RDP Settings
        shell: pwsh
        run: |
          # Enable Remote Desktop and allow classic RDP auth for compatibility (SecurityLayer=0)
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 0 -Force

          # Remove any existing firewall rule to avoid errors on duplicate rules
          netsh advfirewall firewall delete rule name="RDP-Tailscale" | Out-Null

          # Allow incoming RDP
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389

          # Restart the Remote Desktop service
          Restart-Service -Name TermService -Force

      - name: Create RDP User with Secure Password
        shell: pwsh
        run: |
          # Generate a random strong password
          Add-Type -AssemblyName System.Web
          $password = [System.Web.Security.Membership]::GeneratePassword(20, 5)
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force

          # Remove user if exists for idempotence
          if (Get-LocalUser -Name "RDP" -ErrorAction SilentlyContinue) { Remove-LocalUser -Name "RDP" }

          # Create new user and assign to groups
          New-LocalUser -Name "RDP" -Password $securePass -AccountNeverExpires
          Add-LocalGroupMember -Group "Administrators" -Member "RDP"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP"

          # Expose credentials as environment variables
          echo "RDP_USER=RDP" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "RDP_PASSWORD=$password" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Install Tailscale
        shell: pwsh
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      - name: Establish Tailscale Connection
        shell: pwsh
        run: |
          $authKey = "${{ secrets.TAILSCALE_AUTH_KEY }}"
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=$authKey --hostname=gh-runner-$env:GITHUB_RUN_ID

          # Wait for Tailscale IP assignment
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 15) {
            $tsIP = (& "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4 | Select-Object -First 1) -replace '\s',''
            Start-Sleep -Seconds 4
            $retries++
          }

          if (-not $tsIP) {
            Write-Error "Tailscale IP not assigned. Exiting."
            exit 1
          }
          echo "TAILSCALE_IP=$tsIP" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Verify RDP Accessibility
        shell: pwsh
        run: |
          $tsIP = $env:TAILSCALE_IP
          Write-Host "Tailscale IP: $tsIP"
          $result = Test-NetConnection -ComputerName $tsIP -Port 3389
          if (-not $result.TcpTestSucceeded) {
            Write-Error "TCP connection to RDP port 3389 failed"
            exit 1
          }
          Write-Host "TCP connectivity successful!"

      - name: Maintain Connection
        shell: pwsh
        run: |
          $user = $env:RDP_USER
          $password = $env:RDP_PASSWORD
          $ip = $env:TAILSCALE_IP
          Write-Host "`n=== RDP ACCESS ==="
          Write-Host "Address: $ip"
          Write-Host "Username: $user"
          Write-Host "Password: $password"
          Write-Host "==================`n"
          while ($true) {
            Write-Host "[$(Get-Date)] RDP Active - Use Ctrl+C in workflow to terminate"
            Start-Sleep -Seconds 300
          }
